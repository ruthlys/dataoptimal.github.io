filter(year %in% c("2010", "2015", "2020")) %>% mutate(year_event=paste(year, event_type, sub_event_type, sep="_"))
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, sep="_"))
spread(year_event, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, sep="_")) %>%
spread(year_event, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, sub_event_type, sep="_")) %>%
spread(year_event, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, sep="_")) %>%
spread(year_event, interaction)
head(subdata2, 6)
View(subdata2)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, sep="_")) %>%
spread(year_event, interaction)
head(subdata2, 6)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, sep="_")) %>%
select(-year, -event_type, -sub_event_type) %>% spread(year_event, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, country, sep="_")) %>%
select(-year, -event_type, -sub_event_type) %>% spread(year_event, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, event_type, sub_event_type, country, sep="_")) %>%
select(-year, -event_type, -sub_event_type) %>% spread(year_event, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
filter(year %in% c("2010")) %>% mutate(year_event=paste(year, country, sep="_")) %>%
select(-year, -event_type, -sub_event_type) %>% spread(year_event, interaction)
View(data)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>% group_by(country)
View(subdata2)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country) %>%
summarise(mean = mean(interaction), n = n())
View(subdata2)
summarise(mean = mean(interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country) %>%
summarise(mean = mean(interaction))
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country) %>%
summarise(mean = mean(interaction))
View(subdata2)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country, year) %>% fmean
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country, year) %>% select_at(6:16) %>% fmean
df <- fread("/Users/ruthschmidt/Downloads/2010-07-01-2020-07-01-Burkina_Faso-Cameroon-Chad-Mali-Niger.csv", header =T)
library(collapse)
install.packages("collapse")
library(collapse)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country, year) %>% select_at(6:16) %>% fmean
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(country) %>% select_at(6:16) %>% fmean
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year) %>% select_at(6:16) %>% fmean
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year) %>% summarise(interaction = max(interaction)) %>% spread(year, interaction)
View(subdata2)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year) %>% summarise(interaction = max(interaction)) %>% spread(year, interaction, country)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country) %>% summarise(interaction = max(interaction)) %>% spread(year, interaction, country)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country) %>% summarise(interaction = max(interaction)) %>% spread(year, interaction)
# Subsetting, mutating and reshaping the life expectancy data
subdata2 <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country, event_type) %>% summarise(interaction = max(interaction)) %>% spread(year, interaction)
fig <- plot_ly(df_subset, x = ~2010, y = ~coountry, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
fig <- plot_ly(df_subset, x = ~2010, y = ~country, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country, event_type) %>% summarise(interaction = max(interaction))
View(df_subset)
fig <- plot_ly(df_subset, x = ~year, y = ~interaction, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country, event_type) %>% summarise(interaction = max(interaction)) #%>% spread(year, interaction)
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country) %>% summarise(interaction = max(interaction)) #%>% spread(year, interaction)
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year) %>% summarise(interaction = max(interaction)) #%>% spread(year, interaction)
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country) %>% summarise(interaction = max(interaction)) #%>% spread(year, interaction)
fig <- plot_ly(df_subset, x = ~year, y = ~interaction, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
df_subset_BF %>% filter(country =="Burkina Faso")
df_subset_BF %>% df_subset %>% filter(country =="Burkina Faso")
df_subset_BF <- df_subset %>% filter(country =="Burkina Faso")
df_subset_BF <- df_subset %>% filter(country =="Burkina Faso")
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
View(df_subset_BF)
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
df_subset_BF <- df_subset %>% filter(country =="Burkina Faso")
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines', line = list(color = 'rgba(67,67,67,1)', width = 2))
fig
View(df_subset_BF)
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
fig <- plot_ly(df_subset, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
x <- c(1:100)
random_y <- rnorm(100, mean = 0)
data <- data.frame(x, random_y)
View(data)
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines', line = list(color = 'rgba(67,67,67,1)', width = 2))
fig
data$year <- factor(data$year, levels = data[["year"]])
df_subset$year <- factor(df_subset$year, levels = data[["year"]])
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
df_subset_BF <- df_subset %>% filter(country =="Burkina Faso")
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines', line = list(color = 'rgba(67,67,67,1)', width = 2))
fig
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% add_trace(y = ~interaction, name = 'Low 2014', line = list(color = 'rgb(22, 96, 167)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country) %>% summarise(interaction = max(interaction)) #%>% spread(year, interaction)
df_subset$year <- factor(df_subset$year, levels = data[["year"]])
head(df_subset, 10)
# Subsetting and reshaping the data
df_subset <- df %>% select(year, event_type, sub_event_type, interaction, country) %>%
group_by(year, country) %>% summarise(interaction = max(interaction)) #%>% spread(year, interaction)
head(df_subset, 10)
df_subset_BF <- df_subset %>% filter(country =="Burkina Faso")
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, type = 'scatter', mode = 'lines')
fig
fig <- plot_ly(df_subset_BF, x = ~year, y = ~interaction, name = 'High 2014', type = 'scatter', mode = 'lines',
line = list(color = 'rgb(205, 12, 24)', width = 4))
fig <- fig %>% add_trace(y = ~interaction, name = 'Low 2014', line = list(color = 'rgb(22, 96, 167)', width = 4))
fig <- fig %>% layout(title = "Average High and Low Temperatures in New York",
xaxis = list(title = "Months"),
yaxis = list (title = "Temperature (degrees F)"))
fig
devtools::install_github("brendan-R/brocks")
library(brocks)
library(knitr)
library(brocks)
setwd("/Users/ruthschmidt/Documents/GitHub")
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
# Input the filename, update this for every blog post ----
filename <- "How-To-Use-Plotly-With-Jekyll.Rmd"
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("You must specify a .Rmd file.")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
# Input the filename, update this for every blog post ----
filename <- "test.Rmd"
library(knitr)
library(brocks)
setwd("/Users/ruthschmidt/Documents/GitHub")
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
stop("tes.Rmd")
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
setwd("/Users/ruthschmidt/Documents/GitHub/ruthlys.github.io/")
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
setwd("/Users/ruthschmidt/Documents/GitHub/")
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("/Users/ruthschmidt/Documents/GitHub/test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
library(knitr)
# Input the filename, update this for every blog post ----
filename <- "test.Rmd"
library(knitr)
library(brocks)
setwd("/Users/ruthschmidt/Documents/GitHub/")
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("/Users/ruthschmidt/Documents/GitHub/test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
setwd("/Users/ruthschmidt/Documents/GitHub/ruthlys.github.io/")
opts_chunk$set(comment= NA, fig.path='/images/')
dir      <- paste0(getwd(),"/_posts/", Sys.Date(), "-")
output   <- paste0("_posts/",Sys.Date(),"-", sub('.Rmd', '.html', filename))
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("/Users/ruthschmidt/Documents/GitHub/test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
stop("/Users/ruthschmidt/Documents/GitHub/ruthlys.github.io/test.Rmd")
# Check that the input is an .Rmd file ----
if(!grepl(".Rmd", filename)) {
stop("/Users/ruthschmidt/Documents/GitHub/ruthlys.github.io/test.Rmd")
}
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
knit(input= paste0("_drafts/",filename),
output=output,
encoding= 'UTF-8')
knit(input= paste0("/Users/ruthschmidt/Documents/GitHub/ruthlys.github.io/test.Rmd/",filename),
output=output,
encoding= 'UTF-8')
knit(input= paste0("/Users/ruthschmidt/Documents/GitHub/ruthlys.github.io/test.Rmd",filename),
output=output,
encoding= 'UTF-8')
library(babynames)
library(plotly)
library(ggplot2)
library(htmlwidgets)
nms <- filter(babynames, name %in% c("Sam", "Alex"))
p <- ggplot(nms) +
geom_line(aes(year, prop, color = sex, linetype = name))
nms <- filter(babynames, name %in% c("Sam", "Alex"))
library(babynames)
library(data.table)
library(plotly)
data.norm = data.frame(fread("/Users/ruthschmidt/Dropbox/Work/INRS/Data/NI_experiment/Files/VOC/data_normalized.csv", header=T))
# Get anova file
aov = data.frame(fread("/Users/ruthschmidt/Dropbox/Work/INRS/Data/NI_experiment/Files/VOC/anova_0.01_cpds_id_final.csv", sep=",", header=T))
# merge and subset data.norm based on aov
merge.df = merge(aov, data.norm, by ="ID")
merge.df = merge.df[-c(1,3:11)]
# make compounds row names
merge.df = data.frame(merge.df[,-1], row.names=merge.df[,1])
merge.df = as.data.frame(t(merge.df))
# add treatment and date from mapping file
treat = data.frame(fread("/Users/ruthschmidt/Dropbox/Work/INRS/Data/NI_experiment/Files/VOC/mapping_file.tsv", sep="\t", header=T))
treat = treat[order(treat$ID), ]
treat = data.frame(treat[,-1], row.names=treat[,1])
# combine treat and merge.df and set factors
heat.df = cbind.data.frame(treat, merge.df)
heat.df$Treatment = as.factor(heat.df$Treatment)
heat.df$Date = as.factor(heat.df$Date)
# sort data based on treatment and date
heat.df = heat.df[order(heat.df$Treatment, heat.df$Date), ]
# plot
library(heatmaply)
heatmap.cpds = heatmaply(normalize(x = heat.df), #set to heatmaply for interactive heatmap
Colv = NULL,
xlab = "Compound ID", #ylab = "Sample ID",
method = "euclidean",
margins = c(1, 1),
# row_dend_left = TRUE,
# plot_method = "ggplot",
fontsize_col = 10,
fontsize_row = 8,
showticklabels = c(T,T),
scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
low = "#1B9E77",
high = "#D95F02",
midpoint = 0.5,
limits = c(0, 1)
))
#file = c("heatmap.pdf")) # only saves in workdir
heatmap.cpds
saveWidget(heatmap.cpds,'test.html')
Sys.setenv("plotly_username"="RuthSchmidt")
Sys.setenv("plotly_api_key"="fUT9x1FmtjI64LZovVpd")
library(plotly)
library(data.table)
library(plotly)
pca = read.table("/Users/ruthschmidt/Dropbox/Work/INRS/Data/NI_experiment/Files/VOC/pca.df.txt", sep="\t", header=T)
pca$Date = as.factor(pca$Date)
pcoa3d <- plot_ly(pca, x = ~x, y = ~y, z = ~z, color = ~Treatment, colors = "Dark2", text = ~Date, mode = "markers", type = "scatter3d",
marker = list(symbol = ~as.factor(char), symbols = "Date"))
pcoa3d <- pcoa3d %>% layout(scene = list(xaxis = list(title = 'PC1 (37.1%)'),
yaxis = list(title = 'PC2 (13.3%)'),
zaxis = list(title = 'PC3 (5.7%)')))
pcoa3d
chart_link = api_create(pcoa3d, filename = "alphadiv_16S")
chart_link
library(dashBio)
install.packages("dashBio")
remotes::install_github("plotly/dash-bio")
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(
htmlDiv(
list(
htmlH1('Hello Dash'),
htmlDiv(children = "Dash: A web application framework for R."),
dccGraph(
figure=list(
data=list(
list(
x=list(1, 2, 3),
y=list(4, 1, 2),
type='bar',
name='SF'
),
list(
x=list(1, 2, 3),
y=list(2, 4, 5),
type='bar',
name='Montr\U{00E9}al'
)
),
layout = list(title='Dash Data Visualization')
)
)
)
)
)
app$run_server()
app$run_server(debug=F, threaded=TRUE, showcase = T)
app$run_server(showcase = T)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
app <- Dash$new()
app$layout(
htmlDiv(
list(
htmlH1('Hello Dash'),
htmlDiv(children = "Dash: A web application framework for R."),
dccGraph(
figure=list(
data=list(
list(
x=list(1, 2, 3),
y=list(4, 1, 2),
type='bar',
name='SF'
),
list(
x=list(1, 2, 3),
y=list(2, 4, 5),
type='bar',
name='Montr\U{00E9}al'
)
),
layout = list(title='Dash Data Visualization')
)
)
)
)
)
app$run_server(showcase = T)
app$run_server(showcase = T)
app$layout(
htmlDiv(
list(
dccInput(id = "inputID", value = "initial value", type = "text"),
htmlDiv(id = "outputID")
)
)
)
app$callback(output = list(id="outputID", property="children"),
params = list(input(id="inputID", property="value"),
state(id="inputID", property="type")),
function(x, y) {
sprintf("You've entered: '%s' into a '%s' input control", x, y)
}
)
app$run_server(showcase = TRUE)
app$layout(
htmlDiv(
list(
dccInput(id = "inputID", value = "initial value", type = "text"),
htmlDiv(id = "outputID")
)
)
)
app$callback(output = list(id="outputID", property="children"),
params = list(input(id="inputID", property="value"),
state(id="inputID", property="type")),
function(x, y) {
sprintf("You've entered: '%s' into a '%s' input control", x, y)
}
)
app$run_server(showcase = TRUE)
app$run_server(showcase = TRUE)
devtools::install_github('rstudio/pagedown')
library(pagedown)
library(plotly)
library(rjson)
install.packages("rjson")
library(rjson)
data <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
library(rjson)
data <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
View(data)
data <- fromJSON(file="https://hub.arcgis.com/datasets/d15279810bcf4b1ba800e85da6178744_8/geoservice")
data <- fromJSON(file="https://opendata.arcgis.com/datasets/d15279810bcf4b1ba800e85da6178744_8.geojson")
data$features[[1]]
View(data)
View(data)
head(data)
head(data, 10)
reticulate::repl_python()
View(data)
